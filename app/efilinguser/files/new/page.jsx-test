"use client";

import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { ArrowLeft, Save, FileText, Upload } from "lucide-react";

export default function NewFilePage() {
    const { data: session } = useSession();
    const router = useRouter();
    const { toast } = useToast();
    const [loading, setLoading] = useState(false);
    const [departments, setDepartments] = useState([]);
    const [categories, setCategories] = useState([]);
    const [statuses, setStatuses] = useState([]);
    const [users, setUsers] = useState([]);
    
    const [formData, setFormData] = useState({
        subject: '',
        description: '',
        department_id: '',
        category_id: '',
        status_id: '',
        priority: 'normal',
        confidentiality_level: 'normal',
        assigned_to: '',
        due_date: '',
        tags: '',
        work_request_id: ''
    });

    useEffect(() => {
        if (!session?.user?.id) return;
        fetchFormData();
    }, [session?.user?.id]);

    const fetchFormData = async () => {
        try {
            // Fetch departments
            const deptRes = await fetch('/api/efiling/departments');
            const deptData = await deptRes.json();
            setDepartments(deptData || []);

            // Fetch categories
            const catRes = await fetch('/api/efiling/categories');
            const catData = await catRes.json();
            setCategories(catData || []);

            // Fetch statuses
            const statusRes = await fetch('/api/efiling/status');
            const statusData = await statusRes.json();
            setStatuses(statusData || []);

            // Fetch users
            const usersRes = await fetch('/api/users');
            const usersData = await usersRes.json();
            setUsers(usersData || []);

        } catch (error) {
            console.error('Error fetching form data:', error);
            toast({
                title: "Error",
                description: "Failed to load form data",
                variant: "destructive",
            });
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);

        try {
            const response = await fetch('/api/efiling/files', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ...formData,
                    created_by: session?.user?.id,
                    created_at: new Date().toISOString()
                }),
            });

            if (response.ok) {
                const result = await response.json();
                toast({
                    title: "Success",
                    description: "File created successfully",
                });
                router.push(`/efiling/files/${result.id}`);
            } else {
                const error = await response.json();
                toast({
                    title: "Error",
                    description: error.error || "Failed to create file",
                    variant: "destructive",
                });
            }
        } catch (error) {
            toast({
                title: "Error",
                description: "Failed to create file",
                variant: "destructive",
            });
        } finally {
            setLoading(false);
        }
    };

    const handleInputChange = (field, value) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    return (
        <div className="container mx-auto px-4 py-6">
            {/* Header */}
            <div className="flex items-center gap-4 mb-6">
                <Button
                    variant="outline"
                    onClick={() => router.back()}
                    className="flex items-center gap-2"
                >
                    <ArrowLeft className="w-4 h-4" />
                    Back
                </Button>
                <div>
                    <h1 className="text-3xl font-bold text-gray-900">Create New File</h1>
                    <p className="text-gray-600">Create a new e-filing document</p>
                </div>
            </div>

            <form onSubmit={handleSubmit}>
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Main Form */}
                    <div className="lg:col-span-2 space-y-6">
                        {/* Basic Information */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2">
                                    <FileText className="w-5 h-5" />
                                    Basic Information
                                </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <div>
                                    <Label htmlFor="subject">Subject *</Label>
                                    <Input
                                        id="subject"
                                        value={formData.subject}
                                        onChange={(e) => handleInputChange('subject', e.target.value)}
                                        placeholder="Enter file subject"
                                        required
                                    />
                                </div>

                                <div>
                                    <Label htmlFor="description">Description</Label>
                                    <Textarea
                                        id="description"
                                        value={formData.description}
                                        onChange={(e) => handleInputChange('description', e.target.value)}
                                        placeholder="Enter file description"
                                        rows={4}
                                    />
                                </div>

                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <Label htmlFor="department">Department *</Label>
                                        <Select 
                                            value={formData.department_id} 
                                            onValueChange={(value) => handleInputChange('department_id', value)}
                                            required
                                        >
                                            <SelectTrigger>
                                                <SelectValue placeholder="Select department" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {departments.map((dept) => (
                                                    <SelectItem key={dept.id} value={dept.id.toString()}>
                                                        {dept.name}
                                                    </SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <div>
                                        <Label htmlFor="category">Category *</Label>
                                        <Select 
                                            value={formData.category_id} 
                                            onValueChange={(value) => handleInputChange('category_id', value)}
                                            required
                                        >
                                            <SelectTrigger>
                                                <SelectValue placeholder="Select category" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {categories.map((cat) => (
                                                    <SelectItem key={cat.id} value={cat.id.toString()}>
                                                        {cat.name}
                                                    </SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>
                                </div>

                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <Label htmlFor="priority">Priority</Label>
                                        <Select 
                                            value={formData.priority} 
                                            onValueChange={(value) => handleInputChange('priority', value)}
                                        >
                                            <SelectTrigger>
                                                <SelectValue />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="low">Low</SelectItem>
                                                <SelectItem value="normal">Normal</SelectItem>
                                                <SelectItem value="high">High</SelectItem>
                                                <SelectItem value="urgent">Urgent</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <div>
                                        <Label htmlFor="confidentiality">Confidentiality Level</Label>
                                        <Select 
                                            value={formData.confidentiality_level} 
                                            onValueChange={(value) => handleInputChange('confidentiality_level', value)}
                                        >
                                            <SelectTrigger>
                                                <SelectValue />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="normal">Normal</SelectItem>
                                                <SelectItem value="confidential">Confidential</SelectItem>
                                                <SelectItem value="secret">Secret</SelectItem>
                                                <SelectItem value="top_secret">Top Secret</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    </div>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Assignment Information */}
                        <Card>
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2">
                                    <Upload className="w-5 h-5" />
                                    Assignment Information
                                </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <Label htmlFor="assigned_to">Assign To</Label>
                                        <Select 
                                            value={formData.assigned_to} 
                                            onValueChange={(value) => handleInputChange('assigned_to', value)}
                                        >
                                            <SelectTrigger>
                                                <SelectValue placeholder="Select user" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {users.map((user) => (
                                                    <SelectItem key={user.id} value={user.id.toString()}>
                                                        {user.name}
                                                    </SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <div>
                                        <Label htmlFor="due_date">Due Date</Label>
                                        <Input
                                            id="due_date"
                                            type="date"
                                            value={formData.due_date}
                                            onChange={(e) => handleInputChange('due_date', e.target.value)}
                                        />
                                    </div>
                                </div>

                                <div>
                                    <Label htmlFor="tags">Tags</Label>
                                    <Input
                                        id="tags"
                                        value={formData.tags}
                                        onChange={(e) => handleInputChange('tags', e.target.value)}
                                        placeholder="Enter tags separated by commas"
                                    />
                                </div>

                                <div>
                                    <Label htmlFor="work_request_id">Link to Work Request (Optional)</Label>
                                    <Input
                                        id="work_request_id"
                                        value={formData.work_request_id}
                                        onChange={(e) => handleInputChange('work_request_id', e.target.value)}
                                        placeholder="Enter work request ID"
                                    />
                                </div>
                            </CardContent>
                        </Card>
                    </div>

                    {/* Sidebar */}
                    <div className="space-y-6">
                        {/* File Preview */}
                        <Card>
                            <CardHeader>
                                <CardTitle>File Preview</CardTitle>
                            </CardHeader>
                            <CardContent>
                                <div className="space-y-2 text-sm">
                                    <div>
                                        <span className="font-medium">File Number:</span>
                                        <span className="text-gray-600 ml-2">Auto-generated</span>
                                    </div>
                                    <div>
                                        <span className="font-medium">Status:</span>
                                        <span className="text-gray-600 ml-2">Draft</span>
                                    </div>
                                    <div>
                                        <span className="font-medium">Created By:</span>
                                        <span className="text-gray-600 ml-2">{session?.user?.name}</span>
                                    </div>
                                    <div>
                                        <span className="font-medium">Created Date:</span>
                                        <span className="text-gray-600 ml-2">{new Date().toLocaleDateString()}</span>
                                    </div>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Actions */}
                        <Card>
                            <CardHeader>
                                <CardTitle>Actions</CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-2">
                                <Button 
                                    type="submit" 
                                    className="w-full bg-blue-600 hover:bg-blue-700"
                                    disabled={loading}
                                >
                                    <Save className="w-4 h-4 mr-2" />
                                    {loading ? 'Creating...' : 'Create File'}
                                </Button>
                                <Button 
                                    type="button" 
                                    variant="outline" 
                                    className="w-full"
                                    onClick={() => router.back()}
                                >
                                    Cancel
                                </Button>
                            </CardContent>
                        </Card>
                    </div>
                </div>
            </form>
        </div>
    );
} 